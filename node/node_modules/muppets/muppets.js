
let Puppeteer = require('puppeteer')
module.exports = async function(args){
	let browser = await Puppeteer.launch({headless: true})
	var args = args || {}
	let muppets = {
		"on set": [],
		muppets: [],
		min: args.muppets || 1,
		"acting": {},
		init(args){
			this["find muppets"]({number: args.min || this.min})
			this.log(args)
			this.poolAI(args)
			return this
		},
		max: args.max || 4,
		poolAI(args){
			this.poolAI.loop = this.poolAI.loop || setInterval(()=>{
				if(this["on set"].length < this.min && this.muppets.length < this.max){
					this["find muppets"]({number: this.min - this["on set"].length})
				}
			}, 100)
		},
		available(args){
			var args = args || {}
			return new Promise((resolve, reject)=>{
				let i = setInterval(()=>{
					if(this["on set"].length > 0){
						clearInterval(i)
						let muppet = this["on set"].shift()
						let path = muppet.id
						if(!this["acting"][path]){
							this["acting"][path] = muppet
						}
						resolve(muppet)
					}
				}, 50)
			})
		},
		async "find muppets"(args){
			if(typeof args.number !== undefined && typeof args.number == 'number' && !this.finding){
				console.log(`finding ${args.number} ${args.number == 1 ? 'muppet' : 'muppets'}`)
				this.finding = true
				let loop = new Array(args.number).fill(0)
				for await(var i of loop){
					let muppet = await {
						async available(args){
							var muppet = this
							await muppet.page.close()
							var toDeleteFrom = ['on set', 'muppets', 'acting']
							for(var from of toDeleteFrom){
								var i = 0
								if(muppet.muppets[from] instanceof Array){
									for(var thing of muppet.muppets[from]){
										if(muppet.id == thing.id){
											muppet.muppets[from].splice(i, 1)
										}
										i++
									}
								} else {
									delete muppet.muppets[from][muppet.id]
								}
							}
						},
						muppets,
						id: Math.random(),
						browser,
						page: await browser.newPage()
					}
					muppets["on set"].push(muppet)
					muppets.muppets.push(muppet)
				}
				this.finding = false
			}
		},
		log(args){
			let prevmuppets = undefined
			this.log.loop = this.log.loop || setInterval(() => {
				if(prevmuppets !== this["on set"].length){
					console.log(`${this["on set"].length} ${this["on set"].length == 1 ? 'muppet' : 'muppets'} on set, ${Object.keys(this["acting"]).length} acting, ${this.muppets.length} in total.`)
					prevmuppets = this["on set"].length
				}
			}, 100);
			return `${this["on set"].length} ${this["on set"].length == 1 ? 'muppet' : 'muppets'} on set, ${Object.keys(this["acting"]).length} acting, ${this.muppets.length} in total.`
		}
	}
	

	return muppets.init(args)
}

